[["stan-beta-binom.html", "Capitolo 3 Il modello beta-binomiale in linguaggio Stan", " Capitolo 3 Il modello beta-binomiale in linguaggio Stan In questo Capitolo introdurremo un linguaggio di programmazione probabilistica chiamato Stan, ovvero un linguaggio di programmazione in grado di creare modelli e previsioni e di analizzare campioni di dati. Il linguaggio Stan viene utilizzato per specificare un modello statistico bayesiano mediante un insieme di istruzioni che calcolano la funzione di densità di probabilità (logaritmica) a posteriori. Stan prende il nome in onore di Stanislaw Ulam, pioniere del metodo Monte Carlo. Un’introduzione alla sintassi di Stan è fornita nell’Appendice A. In questo Capitolo vedremo come fare inferenza su una proporzione mediante il linguaggio Stan. "],["una-proporzione.html", "3.1 Una proporzione", " 3.1 Una proporzione Si considerino \\(n\\) variabili casuali Bernoulliane i.i.d.: \\[ y = (y_1, \\dots, y_n) \\stackrel{iid}{\\sim} \\mbox{Bernoulli}(\\theta). \\] Vogliamo stimare \\(\\theta\\) avendo osservato \\(y\\). Essendo i.i.d., i dati possono essere riassunti dal numero totale di successi nelle \\(n\\) prove, denotato da \\(y\\). Il modello binomiale è \\[\\begin{equation} p(y \\mid \\theta) = \\mbox{Bin}(y \\mid n, \\theta) = \\binom{n}{y}\\theta^y (1 -\\theta)^{n-y}, \\end{equation}\\] dove nel termine di sinistra dell’equazione abbiamo ignorato \\(n\\) in quanto viene considerato fisso per disegno. L’inferenza sul modello binomiale richiede di assegnare una distribuzione a priori su \\(\\theta\\) che dipende dall’informazione disponibile a priori. Se sceglamo, ad esempio, una \\(\\mbox{Beta}(2, 2)\\) quale distribuzione a priori, il modello diventa: \\[\\begin{align} y &amp;\\sim \\mbox{Bin}(n, \\theta) \\notag\\\\ \\theta &amp;\\sim \\mbox{Beta}(2, 2), \\tag{3.1} \\end{align}\\] dove la prima riga definisce la funzione di verosimiglianza e la seconda riga definisce la distribuzione a priori. Sulla base di ciò che è stato detto nel Capitolo ??, sappiamo che le equazioni (3.1) definiscono il caso Beta-Binomiale. 3.1.1 Il presidente Trump e l’idrossiclorochina Per fare un esempio concreto, consideriamo un set di dati reali. Cito dal Washington Post del 7 aprile 2020: “One of the most bizarre and disturbing aspects of President Trump’s nightly press briefings on the coronavirus pandemic is when he turns into a drug salesman. Like a cable TV pitchman hawking ‘male enhancement’ pills, Trump regularly extols the virtues of taking hydroxychloroquine, a drug used to treat malaria and lupus, as a potential ‘game changer’ that just might cure Covid-19.” Tralasciamo qui il fatto che il presidente Trump non è un esperto in questo campo. Esaminiamo invece le evidenze iniziali a supporto dell’ipotesi che l’idrossiclorochina possa essere utile per la cura del Covid-19, ovvero le evidenze che erano disponibili nel momento in cui il presidente Trump ha fatto le affermazioni riportate sopra (in seguito, quest’idea è stata screditata). Tali evidenze sono state fornite da uno studio di Gautret et al. (2020). Il disegno sperimentale di Gautret et al. (2020) comprende, tra le altre cose, il confronto tra una condizione sperimentale e una condizione di controllo. Il confronto importante è tra la proporzione di paziente positivi al virus SARS-CoV-2 nel gruppo sperimentale (a cui è stata somministrata l’idrossiclorochina; 6 su 14) e la proporzione di paziente positivi nel gruppo di controllo (a cui non è stata somministrata l’idrossiclorochina; ovvero 14 su 16). Obiettivo di questo Capitolo è mostrare come si possa fare inferenza sul modello (3.1) usando il linguaggio Stan. 3.1.2 Interfaccia cmdstanr Nella seguente discussione verrà ottenuta una stima bayesiana del parametro \\(\\theta\\) usando l’interfaccia cmdstanr di CmdStan.1. Considereremo qui solo il gruppo di controllo. Iniziamo a caricare i pacchetti necessari: library(&quot;cmdstanr&quot;) library(&quot;posterior&quot;) rstan_options(auto_write = TRUE) # avoid recompilation of models # parallelize across all CPUs options(mc.cores = parallel::detectCores()) # improve execution time Sys.setenv(LOCAL_CPPFLAGS = &#39;-march=native&#39;) SEED &lt;- 374237 # set random seed for reproducibility Ci sono due passaggi essenziali per le analisi svolte mediante cmdstanr: definire la struttura del modello bayesiano nella notazione Stan; eseguire il campionamento della distribuzione a posteriori. Esaminiamo questi due passaggi nel contesto del modello Beta-Binomiale definito dalla (3.1). 3.1.3 Fase 1 È necessario definire i dati, i parametri e il modello. I dati del gruppo di controllo, che verrà qui esaminato, devono essere contenuti in un oggetto di classe list: data1_list &lt;- list( N = 16, y = c(rep(1, 14), rep(0, 2)) ) Il modello dipende dal parametro theta. In Stan, dobbiamo specificare che theta può essere un qualsiasi numero reale compreso tra 0 e 1. Il modello è \\(\\Bin(n, \\theta)\\) e, nel linguaggio Stan, può essere scritto come for (i in 1:N) { y[i] ~ bernoulli(theta); } ovvero come y ~ bernoulli(theta); La struttura del modello Beta-Binomiale viene tradotta nella sintassi Stan2 e viene poi memorizzata come stringa di caratteri del file oneprop1.stan: modelString = &quot; data { int&lt;lower=0&gt; N; int&lt;lower=0, upper=1&gt; y[N]; } parameters { real&lt;lower=0, upper=1&gt; theta; } model { theta ~ beta(2, 2); y ~ bernoulli(theta); } &quot; writeLines(modelString, con = &quot;code/oneprop.stan&quot;) 3.1.4 Fase 2 Leggiamo l’indirizzo del file che contiene il codice Stan: file &lt;- file.path(&quot;code&quot;, &quot;oneprop.stan&quot;) Compiliamo il codice: mod &lt;- cmdstan_model(file) Il campionamento MCMC si realizza con la chiamata: fit1 &lt;- mod$sample( data = data1_list, iter_sampling = 4000L, iter_warmup = 2000L, seed = SEED, chains = 4L, parallel_chains = 4L, refresh = 0, thin = 1 ) Avendo assunto una distribuzione a priori per il parametro \\(\\theta\\), l’algoritmo procede in maniera ciclica, correggendo la distribuzione a priori di \\(\\theta\\) condizionandola ai valori già generati. Dopo un certo numero di cicli, necessari per portare l’algoritmo a convergenza, i valori estratti possono essere assunti come campionati dalla distribuzione a posteriori di \\(\\theta\\). Si noti che $sample() richiede due tipi di informazioni. Innanzitutto, dobbiamo specificare le informazioni sul modello in base a: mod = la stringa di caratteri che definisce il modello (qui oneprop1.stan), data = i dati in formato lista (data1_list). Dobbiamo inoltre specificare le informazioni sul campionamento MCMC utilizzando tre argomenti aggiuntivi: L’argomento chains specifica quante catene di Markov parallele eseguire. Eseguiamo qui quattro catene, quindi otteniamo quattro campioni distinti di valori \\(\\pi\\). L’argomento iter specifica il numero desiderato di iterazioni o la lunghezza di ciascuna catena di Markov. Per impostazione predefinita, la prima metà di queste iterazioni è costituita da campioni “burn-in” o “warm-up” che verranno ignorati. La seconda metà è conservata e costituisce un campione della distribuzione a posteriori. L’argomento seed per impostare il numero casuale che genera il seme per una simulazione cmdstanr. 3.1.5 Burn-in Al crescere del numero di passi della catena, la distribuzione di target viene sempre meglio approssimata. All’inizio del campionamento, però, la distribuzione può essere significativamente lontana da quella stazionaria, e ci vuole un certo tempo prima di raggiungere la distribuzione stazionaria di equilibrio, detto, appunto, periodo di burn-in. I campioni provenienti da tale parte iniziale della catena vanno tipicamente scartati perché possono non rappresentare accuratamente la distribuzione a posteriori 3.1.6 Inferenza Un sommario della distribuzione a posteriori si ottiene con: fit1$summary(c(&quot;theta&quot;)) #&gt; # A tibble: 1 × 10 #&gt; variable mean median sd mad q5 q95 rhat ess_bulk ess_tail #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 theta 0.798 0.808 0.0876 0.0872 0.638 0.924 1.00 5769. 6359. Creiamo un oggetto di classe stanfit stanfit1 &lt;- rstan::read_stan_csv(fit1$output_files()) di dimensioni dim(as.matrix(stanfit1, pars = &quot;theta&quot;)) #&gt; [1] 16000 1 I primi 10 valori sono presentati qui di seguito as.matrix(stanfit1, pars = &quot;theta&quot;) %&gt;% head(10) #&gt; parameters #&gt; iterations theta #&gt; [1,] 0.852111 #&gt; [2,] 0.784496 #&gt; [3,] 0.784496 #&gt; [4,] 0.755076 #&gt; [5,] 0.725578 #&gt; [6,] 0.774385 #&gt; [7,] 0.774385 #&gt; [8,] 0.806225 #&gt; [9,] 0.826550 #&gt; [10,] 0.849894 La matrice precedente include i valori assunti dalla catena di Markov, ovvero un insieme di valori plausibili \\(\\theta\\) estratti dalla distribuzione a posteriori. Un tracciato della catena di Markov illustra questa esplorazione rappresentando il valore \\(\\theta\\) sulle ordinate e l’indice progressivo di in ogni iterazione sull’ascissa. Usiamo la funzione mcmc_trace() del pacchetto bayesplot (Gabry et al. 2019) per costruire il grafico che include tutte e quattro le catene di Markov: stanfit1 %&gt;% mcmc_trace(pars = c(&quot;theta&quot;), size = 0.1) FIGURA 3.1: Trace-plot per il parametro \\(\\theta\\) nel modello Beta-Binomiale. La figura 3.1 mostra che le catene esplorano uno spazio compreso approssimativamenre tra 0.7 e 0.9; tale figura descrive il comportamento longitudinale delle catene di Markov. Possiamo anche esaminare la distribuzione degli stati della catena di Markov, ovvero, dei valori che queste catene visitano lungo il loro percorso, ignorando l’ordine di queste visite. L’istogramma della figura 3.2 fornisce una rappresentazione grafica di questa distribuzione per i 16000 valori complessivi delle quattro catene, ovvero per 4000 valori provienienti da ciascuna catena. mcmc_hist(stanfit1, pars = &quot;theta&quot;) + yaxis_text(TRUE) + ylab(&quot;count&quot;) FIGURA 3.2: Istogramma che illustra l’approssimazione della distribuzione a posteriori per il parametro \\(\\theta\\) nel modello Beta-Binomiale. Nel modello Beta-Binomiale in cui la verosimiglianza è binomiale con 14 successi su 16 prove e in cui assumiamo una distribuzione a priori di tipo \\(\\mbox{Beta}(2, 2)\\) sul parametro \\(\\theta\\), la distribuzione a posteriori è ancora una distribuzione Beta di parametri \\(\\alpha\\) = 2 + 14 e \\(\\beta\\) = 2 + 16 - 14. La figura 3.3 riporta un kernel density plot per i valori delle quattro catene di Markov con sovrapposta in nero la densità \\(\\mbox{Beta}(16, 4)\\). Il punto importante è che la distribuzione dei valori delle catene di Markov produce un’eccellente approssimazione alla distribuzione bersaglio.3 mcmc_dens(stanfit1, pars = &quot;theta&quot;) + yaxis_text(TRUE) + ylab(&quot;density&quot;) + stat_function(fun = dbeta, args = list(shape1 = 16, shape2=4)) FIGURA 3.3: Istogramma che illustra l’approssimazione della distribuzione a posteriori per il parametro \\(\\theta\\) nel modello Beta-Binomiale. La curva nera rappresenta la corretta distribuzione a posteriori Beta(16, 4). Un intervallo di credibilità al 95% per \\(\\theta\\) si ottiene con la seguente chiamata: posterior1 &lt;- extract(stanfit1) rstantools::posterior_interval(as.matrix(stanfit1), prob = 0.95) #&gt; 2.5% 97.5% #&gt; theta 0.5990419 0.9376123 #&gt; lp__ -12.5817650 -10.0086000 Svolgendo un’analisi bayesiana simile a questa, Gautret et al. (2020) hanno trovato che gli intervalli di credibilità del gruppo di controllo e del gruppo sperimentale non si sovrappongono. Questo fatto viene interpretato dicendo che il parametro \\(\\theta\\) è diverso nei due gruppi. Sulla base di queste evidenza, Gautret et al. (2020) hanno concluso, con un grado di certezza soggettiva del 95%, che nel gruppo sperimentale vi è una probabilità più bassa di risultare positivi al SARS-CoV-2 rispetto al gruppo di controllo. In altri termini, questa analisi dei dati suggerisce che l’idrossiclorochina sia efficace come terapia per il Covid-19. 3.1.7 La critica di Hulme et al. (2020) Un articolo pubblicato da Hulme et al. (2020) si è posto il problema di rianalizzare i dati di Gautret et al. (2020).4 Tra gli autori di questo articolo figura anche Eric-Jan Wagenmakers, uno psicologo molto conosciuto per i suoi contributi metodologici. Hulme et al. (2020) hanno osservato che, nelle analisi statistiche riportate, Gautret et al. (2020) hanno escluso alcuni dati. Nel gruppo sperimentale, infatti, vi erano alcuni pazienti i quali, anziché migliorare, sono in realtà peggiorati. L’analisi statistica di Gautret et al. (2020) ha escluso i dati di questi pazienti. Se consideriamo tutti i pazienti — non solo quelli selezionati da Gautret et al. (2020) — la situazione diventa la seguente: gruppo sperimentale: 10 positivi su 18; gruppo di controllo: 14 positivi su 16. L’analisi dei dati proposta da Hulme et al. (2020) richiede l’uso di alcuni strumenti statistici che, in queste dispense, non verranno discussi. Ma possiamo giungere alle stesse conclusioni raggiunte da questi ricercatori anche usando le procedure statistiche descritte nel Paragrafo successivo. References "],["due-proporzioni.html", "3.2 Due proporzioni", " 3.2 Due proporzioni Svolgiamo ora l’analisi considerando tutti i dati, come suggerito da Hulme et al. (2020). Per fare questo verrà creato un modello bayesiano per fare inferenza sulla differenza tra due proporzioni. Una volta generate le distribuzioni a posteriori per le proporzioni di “successi” nei due gruppi, verrà anche generata la quantità \\[ \\omega = \\frac{\\theta_2 / (1-\\theta_2)}{\\theta_1 / (1-\\theta_1)}, \\] ovvero il rapporto tra gli Odds di positività tra i pazienti del gruppo di controllo e gli Odds di positività tra i pazienti del gruppo sperimentale. Se il valore dell’OR è uguale a 1, significa che l’Odds di positività nel gruppo di controllo è uguale all’odds di positività nel gruppo sperimentale, cioè il fattore in esame (somministrazione dell’idrossiclorochina) è ininfluente sulla comparsa della malattia. L’inferenza statistica sull’efficacia dell’idrossiclorochina come terapia per il Covid-19 può dunque essere effettuata esaminando l’intervallo di credibilità al 95% per l’OR: se tale intervallo include il valore 1, allora non vi è evidenza che l’idrossiclorochina sia efficace come terapia per il Covid-19. Nell’implementazione di questo modello, la quantità di interesse è dunque l’odds ratio; tale quantità viene calcolata nel blocco generated quantities del programma Stan. In questo esempio useremo delle distribuzioni a priori vagamente informative per i parametri \\(\\theta_1\\) e \\(\\theta_1\\). data_list &lt;- list( N1 = 18, y1 = 10, N2 = 16, y2 = 14 ) modelString = &quot; // Comparison of two groups with Binomial data { int&lt;lower=0&gt; N1; // number of experiments in group 1 int&lt;lower=0&gt; y1; // number of deaths in group 1 int&lt;lower=0&gt; N2; // number of experiments in group 2 int&lt;lower=0&gt; y2; // number of deaths in group 2 } parameters { real&lt;lower=0,upper=1&gt; theta1; // probability of death in group 1 real&lt;lower=0,upper=1&gt; theta2; // probability of death in group 2 } model { theta1 ~ beta(2, 2); // prior theta2 ~ beta(2, 2); // prior y1 ~ binomial(N1, theta1); // observation model / likelihood y2 ~ binomial(N2, theta2); // observation model / likelihood } generated quantities { // generated quantities are computed after sampling real oddsratio = (theta2/(1-theta2))/(theta1/(1-theta1)); } &quot; writeLines(modelString, con = &quot;code/twoprop1.stan&quot;) file &lt;- file.path(&quot;code&quot;, &quot;twoprop1.stan&quot;) mod &lt;- cmdstan_model(file) fit &lt;- mod$sample( data = data_list, iter_sampling = 4000L, iter_warmup = 2000L, seed = SEED, chains = 4L, parallel_chains = 4L, refresh = 0, thin = 1 ) stanfit &lt;- rstan::read_stan_csv(fit$output_files()) print( stanfit, pars = c(&quot;theta1&quot;, &quot;theta2&quot;, &quot;oddsratio&quot;), digits_summary = 3L ) #&gt; Inference for Stan model: twoprop1-202201270849-1-5c8221. #&gt; 4 chains, each with iter=6000; warmup=2000; thin=1; #&gt; post-warmup draws per chain=4000, total post-warmup draws=16000. #&gt; #&gt; mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat #&gt; theta1 0.546 0.001 0.103 0.344 0.475 0.546 0.620 0.740 12795 1 #&gt; theta2 0.798 0.001 0.087 0.601 0.744 0.808 0.862 0.937 14193 1 #&gt; oddsratio 4.721 0.043 4.411 0.906 2.166 3.514 5.698 15.558 10400 1 #&gt; #&gt; Samples were drawn using NUTS(diag_e) at Gio Gen 27 08:49:58 2022. #&gt; For each parameter, n_eff is a crude measure of effective sample size, #&gt; and Rhat is the potential scale reduction factor on split chains (at #&gt; convergence, Rhat=1). L’intervallo di credibilità del 95% per l’OR include il valore di 1.0 (ovvero, il valore che indica che gli odds di positività sono uguali nei due gruppi). In base agli standard correnti, un risultato di questo tipo non viene considerato come evidenza sufficiente per potere concludere che il parametro \\(\\theta\\) assume un valore diverso nei due gruppi. In altri termini, se consideriamo tutti i dati, e non solo quelli selezionati dagli autori della ricerca originaria, non vi è evidenza alcuna che l’idrossiclorochina sia efficace come terapia per il Covid-19. References "],["commenti-e-considerazioni-finali-1.html", "Commenti e considerazioni finali", " Commenti e considerazioni finali Concludiamo questa discussione dicendo che ciò che è stato presentato in questo capitolo è un esercizio didattico: la ricerca di Gautret et al. (2020) include tante altre informazioni che non sono state qui considerate. Tuttavia, notiamo che la semplice analisi statistica che abbiamo qui descritto è stata in grado di replicare le conclusioni a cui sono giunti (per altra via) Hulme et al. (2020). References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
